/*
 * IRRTView.java
 */

package irrt;

import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;

import javax.swing.JDialog;
import javax.swing.JFrame;

import java.awt.image.BufferedImage;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import javax.swing.JOptionPane;

import java.io.File;

import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.imageio.ImageIO;


/**
 * The application's main frame.
 */
public class iRRT extends FrameView {
    
    // Global variables
    
    private BufferedImage image;
    private BufferedImage tempImage;
    private BufferedImage map;
    private Graphics gp;
    private Graphics2D g2D;
    
    private boolean ImageInitialized = false;
    private int X = -1;
    private int Y = -1;       
    
    private int start_x = -1;
    private int start_y = -1;
    
    private int goal_x = -1;
    private int goal_y = -1;
    
    private int goal_r = 0;        
    
    private boolean run  = false;
    private boolean stop = true;
        
    private int speed = 0;    

    public iRRT(SingleFrameApplication app) {

        super(app);
        this.getFrame().setExtendedState(JFrame.MAXIMIZED_BOTH);  
        initComponents();        
        this.getFrame().setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        jFileChooser.setCurrentDirectory(new File("./Maps"));
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = IRRTApp.getApplication().getMainFrame();
            aboutBox = new IRRTAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        IRRTApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel_top = new javax.swing.JPanel();
        jPanel_left = new javax.swing.JPanel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jTextField_nodeCount = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField_iteration = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField_pathLength = new javax.swing.JTextField();
        jInternalFrame_settings = new javax.swing.JInternalFrame();
        jComboBox_algorithm = new javax.swing.JComboBox();
        jLabel_itr4 = new javax.swing.JLabel();
        jLabel_itr5 = new javax.swing.JLabel();
        jComboBox_EdgeLength = new javax.swing.JComboBox();
        jLabel_itr2 = new javax.swing.JLabel();
        jComboBox_maxIteration = new javax.swing.JComboBox();
        jComboBox_tryGoalMode = new javax.swing.JComboBox();
        jLabel_itr6 = new javax.swing.JLabel();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jToggleButton_start = new javax.swing.JToggleButton();
        jToggleButton_goal = new javax.swing.JToggleButton();
        jToggleButton_square = new javax.swing.JToggleButton();
        jToggleButton_circle = new javax.swing.JToggleButton();
        jInternalFrame3 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_watch = new javax.swing.JTextArea();
        jInternalFrame4 = new javax.swing.JInternalFrame();
        jButton_stop1 = new javax.swing.JButton();
        jButton_stop2 = new javax.swing.JButton();
        jButton_stop3 = new javax.swing.JButton();
        jButton_stop4 = new javax.swing.JButton();
        jPanel_right = new javax.swing.JPanel();
        jButton_exit = new javax.swing.JButton();
        jButton_new = new javax.swing.JButton();
        jButton_pause = new javax.swing.JButton();
        jButton_stop = new javax.swing.JButton();
        jButton_clear = new javax.swing.JButton();
        jButton_save = new javax.swing.JButton();
        jButton_load = new javax.swing.JButton();
        jSlider_speed = new javax.swing.JSlider();
        jButton_play = new javax.swing.JButton();
        jButton_slowDown = new javax.swing.JButton();
        jButton_speedUp = new javax.swing.JButton();
        jPanel_main = new javax.swing.JPanel();
        jPanel_bottom = new javax.swing.JPanel();
        jFileChooser = new javax.swing.JFileChooser();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(irrt.IRRTApp.class).getContext().getResourceMap(iRRT.class);
        jPanel_top.setBackground(resourceMap.getColor("jPanel_left.background")); // NOI18N
        jPanel_top.setName("jPanel_top"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel_topLayout = new org.jdesktop.layout.GroupLayout(jPanel_top);
        jPanel_top.setLayout(jPanel_topLayout);
        jPanel_topLayout.setHorizontalGroup(
            jPanel_topLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 659, Short.MAX_VALUE)
        );
        jPanel_topLayout.setVerticalGroup(
            jPanel_topLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 8, Short.MAX_VALUE)
        );

        jPanel_left.setBackground(resourceMap.getColor("jPanel_left.background")); // NOI18N
        jPanel_left.setAlignmentX(0.0F);
        jPanel_left.setAlignmentY(0.0F);
        jPanel_left.setName("jPanel_left"); // NOI18N
        jPanel_left.setPreferredSize(new java.awt.Dimension(240, 729));

        jInternalFrame1.setTitle(resourceMap.getString("jInternalFrame1.title")); // NOI18N
        jInternalFrame1.setName("jInternalFrame1"); // NOI18N
        jInternalFrame1.setVisible(true);

        jTextField_nodeCount.setEditable(false);
        jTextField_nodeCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField_nodeCount.setText(resourceMap.getString("jTextField_nodeCount.text")); // NOI18N
        jTextField_nodeCount.setName("jTextField_nodeCount"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jTextField_iteration.setEditable(false);
        jTextField_iteration.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField_iteration.setText(resourceMap.getString("jTextField_iteration.text")); // NOI18N
        jTextField_iteration.setMaximumSize(new java.awt.Dimension(50, 10));
        jTextField_iteration.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField_iteration.setName("jTextField_iteration"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jTextField_pathLength.setEditable(false);
        jTextField_pathLength.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField_pathLength.setName("jTextField_pathLength"); // NOI18N

        org.jdesktop.layout.GroupLayout jInternalFrame1Layout = new org.jdesktop.layout.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jInternalFrame1Layout.createSequentialGroup()
                        .add(jInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jInternalFrame1Layout.createSequentialGroup()
                                .add(1, 1, 1)
                                .add(jLabel1))
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextField_iteration, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .add(jTextField_nodeCount, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                        .addContainerGap())
                    .add(jInternalFrame1Layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField_pathLength, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                        .add(21, 21, 21))))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jInternalFrame1Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField_iteration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTextField_nodeCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jTextField_pathLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jInternalFrame_settings.setTitle(resourceMap.getString("jInternalFrame_settings.title")); // NOI18N
        jInternalFrame_settings.setName("jInternalFrame_settings"); // NOI18N
        jInternalFrame_settings.setVisible(true);

        jComboBox_algorithm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RRT", "RRT+", "RRT*" }));
        jComboBox_algorithm.setName("jComboBox_algorithm"); // NOI18N
        jComboBox_algorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_algorithmActionPerformed(evt);
            }
        });

        jLabel_itr4.setText(resourceMap.getString("jLabel_itr4.text")); // NOI18N
        jLabel_itr4.setName("jLabel_itr4"); // NOI18N

        jLabel_itr5.setText(resourceMap.getString("jLabel_itr5.text")); // NOI18N
        jLabel_itr5.setName("jLabel_itr5"); // NOI18N

        jComboBox_EdgeLength.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "4", "5", "8", "10", "15", "20", "25", "99999" }));
        jComboBox_EdgeLength.setSelectedIndex(3);
        jComboBox_EdgeLength.setName("jComboBox_EdgeLength"); // NOI18N

        jLabel_itr2.setText(resourceMap.getString("jLabel_itr2.text")); // NOI18N
        jLabel_itr2.setName("jLabel_itr2"); // NOI18N

        jComboBox_maxIteration.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "500", "1000", "1500", "2000", "5000", "10000", "100000", "999999" }));
        jComboBox_maxIteration.setSelectedIndex(4);
        jComboBox_maxIteration.setName("jComboBox_maxIteration"); // NOI18N

        jComboBox_tryGoalMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Never", "1%", "10%", "20%", "25%", "33%", "50%", "Always", "Adaptive" }));
        jComboBox_tryGoalMode.setName("jComboBox_tryGoalMode"); // NOI18N

        jLabel_itr6.setText(resourceMap.getString("jLabel_itr6.text")); // NOI18N
        jLabel_itr6.setName("jLabel_itr6"); // NOI18N

        org.jdesktop.layout.GroupLayout jInternalFrame_settingsLayout = new org.jdesktop.layout.GroupLayout(jInternalFrame_settings.getContentPane());
        jInternalFrame_settings.getContentPane().setLayout(jInternalFrame_settingsLayout);
        jInternalFrame_settingsLayout.setHorizontalGroup(
            jInternalFrame_settingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jInternalFrame_settingsLayout.createSequentialGroup()
                .add(jInternalFrame_settingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jInternalFrame_settingsLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jLabel_itr4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jComboBox_algorithm, 0, 103, Short.MAX_VALUE))
                    .add(jInternalFrame_settingsLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel_itr5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jComboBox_EdgeLength, 0, 93, Short.MAX_VALUE))
                    .add(jInternalFrame_settingsLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jInternalFrame_settingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jInternalFrame_settingsLayout.createSequentialGroup()
                                .add(jLabel_itr2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jComboBox_maxIteration, 0, 113, Short.MAX_VALUE))
                            .add(jInternalFrame_settingsLayout.createSequentialGroup()
                                .add(jLabel_itr6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jComboBox_tryGoalMode, 0, 118, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jInternalFrame_settingsLayout.setVerticalGroup(
            jInternalFrame_settingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jInternalFrame_settingsLayout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jInternalFrame_settingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox_algorithm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel_itr4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jInternalFrame_settingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel_itr5)
                    .add(jComboBox_EdgeLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jInternalFrame_settingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox_maxIteration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel_itr2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jInternalFrame_settingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox_tryGoalMode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel_itr6))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jInternalFrame2.setTitle(resourceMap.getString("jInternalFrame2.title")); // NOI18N
        jInternalFrame2.setName("jInternalFrame2"); // NOI18N
        jInternalFrame2.setPreferredSize(new java.awt.Dimension(232, 156));
        jInternalFrame2.setVisible(true);

        jToggleButton_start.setIcon(resourceMap.getIcon("jToggleButton_start.icon")); // NOI18N
        jToggleButton_start.setSelected(true);
        jToggleButton_start.setText(resourceMap.getString("jToggleButton_start.text")); // NOI18N
        jToggleButton_start.setToolTipText(resourceMap.getString("jToggleButton_start.toolTipText")); // NOI18N
        jToggleButton_start.setAlignmentY(0.0F);
        jToggleButton_start.setName("jToggleButton_start"); // NOI18N
        jToggleButton_start.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton_startMouseClicked(evt);
            }
        });

        jToggleButton_goal.setIcon(resourceMap.getIcon("jToggleButton_goal.icon")); // NOI18N
        jToggleButton_goal.setText(resourceMap.getString("jToggleButton_goal.text")); // NOI18N
        jToggleButton_goal.setToolTipText(resourceMap.getString("jToggleButton_goal.toolTipText")); // NOI18N
        jToggleButton_goal.setAlignmentY(0.0F);
        jToggleButton_goal.setName("jToggleButton_goal"); // NOI18N
        jToggleButton_goal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton_goalMouseClicked(evt);
            }
        });

        jToggleButton_square.setIcon(resourceMap.getIcon("jToggleButton_square.icon")); // NOI18N
        jToggleButton_square.setText(resourceMap.getString("jToggleButton_square.text")); // NOI18N
        jToggleButton_square.setToolTipText(resourceMap.getString("jToggleButton_square.toolTipText")); // NOI18N
        jToggleButton_square.setAlignmentY(0.0F);
        jToggleButton_square.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton_square.setName("jToggleButton_square"); // NOI18N
        jToggleButton_square.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton_squareMouseClicked(evt);
            }
        });

        jToggleButton_circle.setIcon(resourceMap.getIcon("jToggleButton_circle.icon")); // NOI18N
        jToggleButton_circle.setText(resourceMap.getString("jToggleButton_circle.text")); // NOI18N
        jToggleButton_circle.setToolTipText(resourceMap.getString("jToggleButton_circle.toolTipText")); // NOI18N
        jToggleButton_circle.setAlignmentY(0.0F);
        jToggleButton_circle.setMaximumSize(new java.awt.Dimension(86, 29));
        jToggleButton_circle.setMinimumSize(new java.awt.Dimension(86, 29));
        jToggleButton_circle.setName("jToggleButton_circle"); // NOI18N
        jToggleButton_circle.setPreferredSize(new java.awt.Dimension(48, 48));
        jToggleButton_circle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton_circleMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jInternalFrame2Layout = new org.jdesktop.layout.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jToggleButton_start, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToggleButton_goal)
                .add(1, 1, 1)
                .add(jToggleButton_square, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToggleButton_circle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jInternalFrame2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jToggleButton_circle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jToggleButton_square, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jToggleButton_goal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jToggleButton_start, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(55, 55, 55))
        );

        jInternalFrame3.setClosable(true);
        jInternalFrame3.setTitle(resourceMap.getString("jInternalFrame3.title")); // NOI18N
        jInternalFrame3.setName("jInternalFrame3"); // NOI18N
        jInternalFrame3.setVisible(true);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea_watch.setColumns(20);
        jTextArea_watch.setLineWrap(true);
        jTextArea_watch.setRows(5);
        jTextArea_watch.setName("jTextArea_watch"); // NOI18N
        jScrollPane1.setViewportView(jTextArea_watch);

        org.jdesktop.layout.GroupLayout jInternalFrame3Layout = new org.jdesktop.layout.GroupLayout(jInternalFrame3.getContentPane());
        jInternalFrame3.getContentPane().setLayout(jInternalFrame3Layout);
        jInternalFrame3Layout.setHorizontalGroup(
            jInternalFrame3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
        );
        jInternalFrame3Layout.setVerticalGroup(
            jInternalFrame3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
        );

        jInternalFrame4.setTitle(resourceMap.getString("jInternalFrame4.title")); // NOI18N
        jInternalFrame4.setName("jInternalFrame4"); // NOI18N
        jInternalFrame4.setPreferredSize(new java.awt.Dimension(240, 108));

        jButton_stop1.setIcon(resourceMap.getIcon("jButton_stop1.icon")); // NOI18N
        jButton_stop1.setToolTipText(resourceMap.getString("jButton_stop1.toolTipText")); // NOI18N
        jButton_stop1.setAlignmentY(0.0F);
        jButton_stop1.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_stop1.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_stop1.setName("jButton_stop1"); // NOI18N
        jButton_stop1.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_stop1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_stop1MouseClicked(evt);
            }
        });

        jButton_stop2.setIcon(resourceMap.getIcon("jButton_stop2.icon")); // NOI18N
        jButton_stop2.setToolTipText(resourceMap.getString("jButton_stop2.toolTipText")); // NOI18N
        jButton_stop2.setAlignmentY(0.0F);
        jButton_stop2.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_stop2.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_stop2.setName("jButton_stop2"); // NOI18N
        jButton_stop2.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_stop2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_stop2MouseClicked(evt);
            }
        });

        jButton_stop3.setIcon(resourceMap.getIcon("jButton_stop3.icon")); // NOI18N
        jButton_stop3.setToolTipText(resourceMap.getString("jButton_stop3.toolTipText")); // NOI18N
        jButton_stop3.setAlignmentY(0.0F);
        jButton_stop3.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_stop3.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_stop3.setName("jButton_stop3"); // NOI18N
        jButton_stop3.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_stop3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_stop3MouseClicked(evt);
            }
        });

        jButton_stop4.setIcon(resourceMap.getIcon("jButton_stop4.icon")); // NOI18N
        jButton_stop4.setToolTipText(resourceMap.getString("jButton_stop4.toolTipText")); // NOI18N
        jButton_stop4.setAlignmentY(0.0F);
        jButton_stop4.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_stop4.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_stop4.setName("jButton_stop4"); // NOI18N
        jButton_stop4.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_stop4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_stop4MouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jInternalFrame4Layout = new org.jdesktop.layout.GroupLayout(jInternalFrame4.getContentPane());
        jInternalFrame4.getContentPane().setLayout(jInternalFrame4Layout);
        jInternalFrame4Layout.setHorizontalGroup(
            jInternalFrame4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jInternalFrame4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jButton_stop1, 0, 0, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton_stop2, 0, 0, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton_stop3, 0, 0, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton_stop4, 0, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jInternalFrame4Layout.setVerticalGroup(
            jInternalFrame4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jInternalFrame4Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jInternalFrame4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jButton_stop4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton_stop3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton_stop2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton_stop1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel_leftLayout = new org.jdesktop.layout.GroupLayout(jPanel_left);
        jPanel_left.setLayout(jPanel_leftLayout);
        jPanel_leftLayout.setHorizontalGroup(
            jPanel_leftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jInternalFrame2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jInternalFrame4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .add(jInternalFrame_settings)
            .add(jInternalFrame1)
            .add(jInternalFrame3)
        );
        jPanel_leftLayout.setVerticalGroup(
            jPanel_leftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel_leftLayout.createSequentialGroup()
                .add(jInternalFrame2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jInternalFrame_settings, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jInternalFrame1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel_leftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jInternalFrame4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jInternalFrame3)))
        );

        jPanel_right.setBackground(resourceMap.getColor("jPanel_left.background")); // NOI18N
        jPanel_right.setName("jPanel_right"); // NOI18N

        jButton_exit.setIcon(resourceMap.getIcon("jButton_exit.icon")); // NOI18N
        jButton_exit.setText(resourceMap.getString("jButton_exit.text")); // NOI18N
        jButton_exit.setToolTipText(resourceMap.getString("jButton_exit.toolTipText")); // NOI18N
        jButton_exit.setAlignmentY(0.0F);
        jButton_exit.setName("jButton_exit"); // NOI18N
        jButton_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_exitMouseClicked(evt);
            }
        });

        jButton_new.setIcon(resourceMap.getIcon("jButton_new.icon")); // NOI18N
        jButton_new.setText(resourceMap.getString("jButton_new.text")); // NOI18N
        jButton_new.setToolTipText(resourceMap.getString("jButton_new.toolTipText")); // NOI18N
        jButton_new.setAlignmentY(0.0F);
        jButton_new.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_new.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_new.setName("jButton_new"); // NOI18N
        jButton_new.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_new.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_newMouseClicked(evt);
            }
        });

        jButton_pause.setIcon(resourceMap.getIcon("jButton_pause.icon")); // NOI18N
        jButton_pause.setText(resourceMap.getString("jButton_pause.text")); // NOI18N
        jButton_pause.setToolTipText(resourceMap.getString("jButton_pause.toolTipText")); // NOI18N
        jButton_pause.setAlignmentY(0.0F);
        jButton_pause.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_pause.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_pause.setName("jButton_pause"); // NOI18N
        jButton_pause.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_pause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_pauseMouseClicked(evt);
            }
        });

        jButton_stop.setIcon(resourceMap.getIcon("jButton_stop.icon")); // NOI18N
        jButton_stop.setText(resourceMap.getString("jButton_stop.text")); // NOI18N
        jButton_stop.setToolTipText(resourceMap.getString("jButton_stop.toolTipText")); // NOI18N
        jButton_stop.setAlignmentY(0.0F);
        jButton_stop.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_stop.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_stop.setName("jButton_stop"); // NOI18N
        jButton_stop.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_stop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_stopMouseClicked(evt);
            }
        });

        jButton_clear.setIcon(resourceMap.getIcon("jButton_clear.icon")); // NOI18N
        jButton_clear.setText(resourceMap.getString("jButton_clear.text")); // NOI18N
        jButton_clear.setToolTipText(resourceMap.getString("jButton_clear.toolTipText")); // NOI18N
        jButton_clear.setAlignmentY(0.0F);
        jButton_clear.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_clear.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_clear.setName("jButton_clear"); // NOI18N
        jButton_clear.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_clearMouseClicked(evt);
            }
        });

        jButton_save.setIcon(resourceMap.getIcon("jButton_save.icon")); // NOI18N
        jButton_save.setText(resourceMap.getString("jButton_save.text")); // NOI18N
        jButton_save.setToolTipText(resourceMap.getString("jButton_save.toolTipText")); // NOI18N
        jButton_save.setAlignmentY(0.0F);
        jButton_save.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_save.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_save.setName("jButton_save"); // NOI18N
        jButton_save.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_saveMouseClicked(evt);
            }
        });

        jButton_load.setIcon(resourceMap.getIcon("jButton_load.icon")); // NOI18N
        jButton_load.setText(resourceMap.getString("jButton_load.text")); // NOI18N
        jButton_load.setToolTipText(resourceMap.getString("jButton_load.toolTipText")); // NOI18N
        jButton_load.setAlignmentY(0.0F);
        jButton_load.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_load.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_load.setName("jButton_load"); // NOI18N
        jButton_load.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_load.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_loadMouseClicked(evt);
            }
        });

        jSlider_speed.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider_speed.setValue(100);
        jSlider_speed.setName("jSlider_speed"); // NOI18N
        jSlider_speed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_speedStateChanged(evt);
            }
        });

        jButton_play.setIcon(resourceMap.getIcon("jButton_play.icon")); // NOI18N
        jButton_play.setToolTipText(resourceMap.getString("jButton_play.toolTipText")); // NOI18N
        jButton_play.setAlignmentY(0.0F);
        jButton_play.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton_play.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton_play.setName("jButton_play"); // NOI18N
        jButton_play.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton_play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_playMouseClicked(evt);
            }
        });

        jButton_slowDown.setIcon(resourceMap.getIcon("jButton_slowDown.icon")); // NOI18N
        jButton_slowDown.setToolTipText(resourceMap.getString("jButton_slowDown.toolTipText")); // NOI18N
        jButton_slowDown.setAlignmentY(0.0F);
        jButton_slowDown.setName("jButton_slowDown"); // NOI18N
        jButton_slowDown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_slowDownMouseClicked(evt);
            }
        });

        jButton_speedUp.setIcon(resourceMap.getIcon("jButton_speedUp.icon")); // NOI18N
        jButton_speedUp.setToolTipText(resourceMap.getString("jButton_speedUp.toolTipText")); // NOI18N
        jButton_speedUp.setAlignmentY(0.0F);
        jButton_speedUp.setName("jButton_speedUp"); // NOI18N
        jButton_speedUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_speedUpMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel_rightLayout = new org.jdesktop.layout.GroupLayout(jPanel_right);
        jPanel_right.setLayout(jPanel_rightLayout);
        jPanel_rightLayout.setHorizontalGroup(
            jPanel_rightLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel_rightLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel_rightLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButton_exit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton_new, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton_save, 0, 48, Short.MAX_VALUE)
                    .add(jButton_load, 0, 48, Short.MAX_VALUE)
                    .add(jButton_play, 0, 0, Short.MAX_VALUE)
                    .add(jButton_clear, 0, 48, Short.MAX_VALUE)
                    .add(jButton_pause, 0, 48, Short.MAX_VALUE)
                    .add(jButton_stop, 0, 48, Short.MAX_VALUE)
                    .add(jButton_speedUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel_rightLayout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jSlider_speed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jButton_slowDown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel_rightLayout.setVerticalGroup(
            jPanel_rightLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel_rightLayout.createSequentialGroup()
                .add(jButton_new, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton_save, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton_load, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(41, 41, 41)
                .add(jButton_play, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton_clear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton_pause, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton_stop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(47, 47, 47)
                .add(jButton_speedUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSlider_speed, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton_slowDown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(50, 50, 50)
                .add(jButton_exit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jPanel_main.setBackground(resourceMap.getColor("jPanel_main.background")); // NOI18N
        jPanel_main.setAutoscrolls(true);
        jPanel_main.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        jPanel_main.setName("jPanel_main"); // NOI18N
        jPanel_main.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel_mainMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel_mainMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel_mainMouseClicked(evt);
            }
        });
        jPanel_main.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel_mainComponentResized(evt);
            }
        });
        jPanel_main.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel_mainMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel_mainMouseDragged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel_mainLayout = new org.jdesktop.layout.GroupLayout(jPanel_main);
        jPanel_main.setLayout(jPanel_mainLayout);
        jPanel_mainLayout.setHorizontalGroup(
            jPanel_mainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 363, Short.MAX_VALUE)
        );
        jPanel_mainLayout.setVerticalGroup(
            jPanel_mainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 729, Short.MAX_VALUE)
        );

        jPanel_bottom.setBackground(resourceMap.getColor("jPanel_left.background")); // NOI18N
        jPanel_bottom.setName("jPanel_bottom"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel_bottomLayout = new org.jdesktop.layout.GroupLayout(jPanel_bottom);
        jPanel_bottom.setLayout(jPanel_bottomLayout);
        jPanel_bottomLayout.setHorizontalGroup(
            jPanel_bottomLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 659, Short.MAX_VALUE)
        );
        jPanel_bottomLayout.setVerticalGroup(
            jPanel_bottomLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 8, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(jPanel_left, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel_main, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel_right, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel_bottom, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel_top, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(jPanel_top, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel_left, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel_main, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel_right, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel_bottom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jFileChooser.setDialogTitle(resourceMap.getString("jFileChooser.dialogTitle")); // NOI18N
        jFileChooser.setName("jFileChooser"); // NOI18N

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents
    
private void jButton_newMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_newMouseClicked
    
    resetGlobalVariables();
        
    image = initImage(jPanel_main.getWidth(),jPanel_main.getHeight());
    map = null;
    tempImage = null;
        
    g2D.drawImage(image,0,0, jPanel_main);
        
    clearTextFields();    
}//GEN-LAST:event_jButton_newMouseClicked

private void jButton_exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_exitMouseClicked
    this.getFrame().dispose();
    System.exit(0);    
}//GEN-LAST:event_jButton_exitMouseClicked

private void jPanel_mainMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel_mainMouseDragged

    if(jToggleButton_square.isSelected())
        drawRectangle(X,Y,evt.getX(),evt.getY(),0);
    else if(jToggleButton_circle.isSelected())
        drawCircle(X,Y,evt.getX(),evt.getY(),0);
    else if(jToggleButton_goal.isSelected()){
        drawStartGoal(X,Y,evt.getX(),evt.getY(), 200, 0, 0);
        goal_x = evt.getX();
        goal_y = evt.getY();
    }
    else if(jToggleButton_start.isSelected()){
        drawStartGoal(X,Y,evt.getX(),evt.getY(), 0, 150, 0);
        start_x = evt.getX();
        start_y = evt.getY();
    }
    else{
        erase(X,Y,evt.getX(),evt.getY());
    }
}//GEN-LAST:event_jPanel_mainMouseDragged

private void jPanel_mainComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel_mainComponentResized

    if(!ImageInitialized){
        resetGlobalVariables();
        gp = jPanel_main.getGraphics();
        g2D = (Graphics2D) gp;
        image = initImage(jPanel_main.getWidth(),jPanel_main.getHeight());
        g2D.drawImage(image,0,0,jPanel_main);
        ImageInitialized = true;
    }else{
        
        if(run){
            run = false;
            stop = true;            
        }  
        
        gp = jPanel_main.getGraphics();
        g2D = (Graphics2D) gp;
        image = initImage(jPanel_main.getWidth(),jPanel_main.getHeight());
        g2D.drawImage(image,0,0, jPanel_main);       
    }        
}//GEN-LAST:event_jPanel_mainComponentResized

private void jPanel_mainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel_mainMouseClicked
    this.getFrame().setResizable(false);
}//GEN-LAST:event_jPanel_mainMouseClicked

private void jPanel_mainMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel_mainMouseReleased
    image = combineImage(tempImage, image);
    g2D.drawImage(image,0,0,jPanel_main);
}//GEN-LAST:event_jPanel_mainMouseReleased

private void jPanel_mainMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel_mainMousePressed
    X = evt.getX();
    Y = evt.getY();
    jPanel_main.grabFocus();
}//GEN-LAST:event_jPanel_mainMousePressed

private void jButton_pauseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_pauseMouseClicked
    if(run) run = false;
}//GEN-LAST:event_jButton_pauseMouseClicked

private void jButton_stopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_stopMouseClicked
    if(!stop){
        run = false;
        stop = true;        
    }        
}//GEN-LAST:event_jButton_stopMouseClicked

private void jButton_clearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_clearMouseClicked
    if(map != null){        
        if(!stop){
            run = false;
            stop = true;        
        }        
        image = map;
        g2D.drawImage(map,0,0, jPanel_main);
        clearTextFields();
    }
}//GEN-LAST:event_jButton_clearMouseClicked

private void jPanel_mainMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel_mainMouseMoved

}//GEN-LAST:event_jPanel_mainMouseMoved

private void jSlider_speedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_speedStateChanged
    speed = jSlider_speed.getMaximum() - jSlider_speed.getValue();
}//GEN-LAST:event_jSlider_speedStateChanged

private void jToggleButton_startMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton_startMouseClicked
    jToggleButton_goal.setSelected(false);
    jToggleButton_square.setSelected(false);
    jToggleButton_circle.setSelected(false);
}//GEN-LAST:event_jToggleButton_startMouseClicked

private void jToggleButton_goalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton_goalMouseClicked
    jToggleButton_start.setSelected(false);
    jToggleButton_square.setSelected(false);
    jToggleButton_circle.setSelected(false);
}//GEN-LAST:event_jToggleButton_goalMouseClicked

private void jToggleButton_circleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton_circleMouseClicked
    jToggleButton_goal.setSelected(false);
    jToggleButton_square.setSelected(false);
    jToggleButton_start.setSelected(false);
}//GEN-LAST:event_jToggleButton_circleMouseClicked

private void jToggleButton_squareMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton_squareMouseClicked
    jToggleButton_goal.setSelected(false);
    jToggleButton_start.setSelected(false);
    jToggleButton_circle.setSelected(false);
}//GEN-LAST:event_jToggleButton_squareMouseClicked

private void jButton_saveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_saveMouseClicked
    boolean validMap = true;
    int edgePixel = new Color(1, 1, 1).getRGB();
    int blankPixel = new Color(255, 255, 255).getRGB();
    boolean blankMap = true;
    
    for(int i = 0; i < image.getWidth(); i++)
            for(int j = 0; j < image.getHeight(); j++){
                if(image.getRGB(i, j) != blankPixel) blankMap = false;
                //if(image.getRGB(i, j) == edgePixel) validMap = false;
            }
    
    if(!blankMap && validMap){              
        jFileChooser.setDialogTitle("Save map");
        int action = jFileChooser.showSaveDialog(null);
        
        if(action == JFileChooser.APPROVE_OPTION){
            
            String fileName = jFileChooser.getSelectedFile().toString();
            fileName = fileName.replaceAll(".png", "");
            File file = new File(fileName+ ".png");
            if(file == null)
                return;
            if(file.exists())
            {
                action = JOptionPane.showConfirmDialog(null, "Replace existing file?");
                if (action == JOptionPane.NO_OPTION)
                    return;
            }
            try
            {
                ImageIO.write(image, "png", file);
            }
            catch(Exception x){x.printStackTrace();}            
        }
    }    
}//GEN-LAST:event_jButton_saveMouseClicked

private void jButton_loadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_loadMouseClicked
    jFileChooser.setDialogTitle("Load map");
    int action = jFileChooser.showOpenDialog(null);
    int[] coordinates = new int[5]; 

    if(action == JFileChooser.APPROVE_OPTION){

        String fileName = jFileChooser.getSelectedFile().toString();        
        File file = new File(fileName);
        
        BufferedImage img = null;
        
        try {
            img = ImageIO.read(file);
        } catch (Exception e) {e.printStackTrace();}
        
        if(img != null)
        {
            resetGlobalVariables();                   

            clearTextFields();  
            
            g2D.drawImage(img,0,0,jPanel_main);
            coordinates = getStartGoalCoordinates(img);
            start_x = coordinates[0];
            start_y = coordinates[1];
            goal_x = coordinates[2];
            goal_y = coordinates[3];
            goal_r = coordinates[4];
            image = img;
            map = img;
        }
    }
}//GEN-LAST:event_jButton_loadMouseClicked

private void jButton_playMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_playMouseClicked

    if(stop && start_x != -1 && start_y != -1){                
        run = true;
        stop = false;
        Thread rrt = new RRT();
        map = image;
        rrt.start();
    }
    else if(!run)
        run = true;
}//GEN-LAST:event_jButton_playMouseClicked

private void jButton_slowDownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_slowDownMouseClicked
    int curVal = jSlider_speed.getValue();
    int max = jSlider_speed.getMaximum();
    int increment = max/10;
    if(curVal - increment < 0) jSlider_speed.setValue(0);
    else jSlider_speed.setValue(curVal-increment);
}//GEN-LAST:event_jButton_slowDownMouseClicked

private void jButton_speedUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_speedUpMouseClicked
    int curVal = jSlider_speed.getValue();
    int max = jSlider_speed.getMaximum();
    int increment = max/10;
    if(curVal + increment >= max) jSlider_speed.setValue(max);
    else jSlider_speed.setValue(curVal+increment);
}//GEN-LAST:event_jButton_speedUpMouseClicked

private void jButton_stop1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_stop1MouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_jButton_stop1MouseClicked

private void jButton_stop2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_stop2MouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_jButton_stop2MouseClicked

private void jButton_stop3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_stop3MouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_jButton_stop3MouseClicked

private void jButton_stop4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_stop4MouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_jButton_stop4MouseClicked

    private void jComboBox_algorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_algorithmActionPerformed
        String algorithm = jComboBox_algorithm.getSelectedItem().toString();
        if(algorithm.equals("RRT*")){
            jComboBox_tryGoalMode.setSelectedItem("1%");
            jComboBox_EdgeLength.setSelectedItem("10");
        }
        else if(algorithm.equals("RRT+")){
            jComboBox_tryGoalMode.setSelectedItem("Adaptive");
            jComboBox_EdgeLength.setSelectedItem("10");
        }
        else if(algorithm.equals("RRT"))
            jComboBox_tryGoalMode.setSelectedItem("Never");
    }//GEN-LAST:event_jComboBox_algorithmActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_clear;
    private javax.swing.JButton jButton_exit;
    private javax.swing.JButton jButton_load;
    private javax.swing.JButton jButton_new;
    private javax.swing.JButton jButton_pause;
    private javax.swing.JButton jButton_play;
    private javax.swing.JButton jButton_save;
    private javax.swing.JButton jButton_slowDown;
    private javax.swing.JButton jButton_speedUp;
    private javax.swing.JButton jButton_stop;
    private javax.swing.JButton jButton_stop1;
    private javax.swing.JButton jButton_stop2;
    private javax.swing.JButton jButton_stop3;
    private javax.swing.JButton jButton_stop4;
    private javax.swing.JComboBox jComboBox_EdgeLength;
    private javax.swing.JComboBox jComboBox_algorithm;
    private javax.swing.JComboBox jComboBox_maxIteration;
    private javax.swing.JComboBox jComboBox_tryGoalMode;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JInternalFrame jInternalFrame3;
    private javax.swing.JInternalFrame jInternalFrame4;
    private javax.swing.JInternalFrame jInternalFrame_settings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel_itr2;
    private javax.swing.JLabel jLabel_itr4;
    private javax.swing.JLabel jLabel_itr5;
    private javax.swing.JLabel jLabel_itr6;
    private javax.swing.JPanel jPanel_bottom;
    private javax.swing.JPanel jPanel_left;
    private javax.swing.JPanel jPanel_main;
    private javax.swing.JPanel jPanel_right;
    private javax.swing.JPanel jPanel_top;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider_speed;
    private javax.swing.JTextArea jTextArea_watch;
    private javax.swing.JTextField jTextField_iteration;
    private javax.swing.JTextField jTextField_nodeCount;
    private javax.swing.JTextField jTextField_pathLength;
    private javax.swing.JToggleButton jToggleButton_circle;
    private javax.swing.JToggleButton jToggleButton_goal;
    private javax.swing.JToggleButton jToggleButton_square;
    private javax.swing.JToggleButton jToggleButton_start;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    private JDialog aboutBox;
    
    private int[] getStartGoalCoordinates(BufferedImage map){
        
        int[] coordinates = new int[5];
        for(int i = 0; i < coordinates.length; i++)
            coordinates[i] = -1;
        
        int start = new Color(0, 150, 0).getRGB();
        int goal = new Color(200, 0, 0).getRGB();
        
        int start_x = -1;
        int start_y = -1;
        int start_low_y = -1;
        int start_high_y = -1;
        int start_low_x = -1;
        int start_high_x = -1;
        
        int goal_x = -1;
        int goal_y = -1;
        int goal_r = 0;
        int goal_low_y = -1;
        int goal_high_y = -1;
        int goal_low_x = -1;
        int goal_high_x = -1;
        
        boolean start_found = false;
        boolean goal_found = false;
                        
        for(int i = 0; i < map.getWidth(); i++){
            for(int j = 0; j < map.getHeight(); j++){
                
                if(start_found == false && map.getRGB(i, j) == start){

                    start_found = true;
                    start_low_x = i;
                    start_low_y = j;

                    int temp = start_low_x;
                    while(map.getRGB(temp, start_low_y) == start)
                        temp++;
                                        
                    start_high_x = temp - 1;                    
                    start_x = (start_high_x + start_low_x) / 2;
                    
                    temp = start_low_y;                    
                    while(map.getRGB(start_low_x, temp) == start)
                        temp++;
                    
                    start_high_y = temp - 1;
                    start_y = (start_high_y + start_low_y) / 2;                    
                }
                else if(goal_found == false && map.getRGB(i, j) == goal){

                    goal_found = true;
                    goal_low_x = i;
                    goal_low_y = j;

                    int temp = goal_low_x;
                    while(map.getRGB(temp, goal_low_y) == goal)
                        temp++;
                                        
                    goal_high_x = temp - 1;
                    goal_x = (goal_high_x + goal_low_x) / 2;
                    
                    temp = goal_low_y;                    
                    while(map.getRGB(goal_low_x, temp) == goal)
                        temp++;
                    
                    goal_high_y = temp - 1;
                    goal_y = (goal_high_y + goal_low_y) / 2;
                    
                    goal_r = 0;
                    while(map.getRGB(goal_x, (goal_y + goal_r)) == goal)
                        goal_r++;
                }
            }
        }
        
        coordinates[0] = start_x;
        coordinates[1] = start_y;
        coordinates[2] = goal_x;
        coordinates[3] = goal_y;
        coordinates[4] = goal_r;
        
        return coordinates;
    }
    
    private BufferedImage initImage(int width, int height){
        BufferedImage img = new BufferedImage(width, height, 1);       
        int rgb = new Color(255, 255, 255).getRGB();
        for(int i = 0; i < width; i++)
            for(int j = 0; j < height; j++)
                img.setRGB(i, j, rgb);
        return img;
    }
    
    private BufferedImage combineImage(BufferedImage tempImg, BufferedImage img){ 
        
        if(tempImg == null || img == null) return null;
        
        if(tempImg.getHeight() != img.getHeight() || tempImg.getWidth() != img.getWidth())
            return null;        
        
        //int img1 = 0;
        int rgb = 0;
        int w = img.getWidth();
        if(tempImg.getWidth() < img.getWidth())
            w = tempImg.getWidth();
        int h = img.getHeight();
        if(tempImg.getHeight() < img.getHeight())
            h = tempImg.getWidth();
        for(int i = 0; i < w; i++){
            for(int j = 0; j < h; j++){
                //img1 = new Color(255, 255, 255).getRGB();
                rgb = tempImg.getRGB(i, j);
                //if(img2 < img1)
                img.setRGB(i, j, rgb);
            }
        }
        
        return img;
    }
    
    private void drawStartGoal(int p1x, int p1y, int p2x, int p2y, int r, int g, int b){
        
        tempImage = new BufferedImage(jPanel_main.getWidth(), jPanel_main.getHeight(),1);
        int start_or_goal = new Color(r, g, b).getRGB();
        int freeSpace = new Color(255, 255, 255).getRGB();
        
        for(int i = 0; i < tempImage.getWidth(); i++)
            for(int j = 0; j < tempImage.getHeight(); j++){
                if(image.getRGB(i, j) == start_or_goal){
                    tempImage.setRGB(i, j, freeSpace);
                    image.setRGB(i, j, freeSpace);
                }
                else
                    tempImage.setRGB(i, j, image.getRGB(i, j));
            }
            
        int w = jPanel_main.getWidth();
        int h = jPanel_main.getHeight();                
        
        if(p2x > w) p2x = w;
        else if(p2x < 0) p2x = 0;
        
        if(p2y > h) p2y = h;
        else if(p2y < 0)p2y = 0;       
        
        double rad = Math.sqrt((p1x - p2x)*(p1x - p2x) + (p1y - p2y)*(p1y - p2y));
        
        if(r == 200) goal_r = (int)Math.ceil(rad);

        double d = 0;
        
        for(int x = 0; x < w; x++){
            for(int y = 0; y < h; y++){
                d = Math.sqrt((x - p2x)*(x - p2x) + (y - p2y)*(y - p2y));
                if(d <= rad)
                    tempImage.setRGB(x, y, new Color(r, g, b).getRGB());                                
            }
        }
        
        g2D.drawImage(tempImage,0,0,jPanel_main);        
    }
    
    private void drawCircle(int p1x, int p1y, int p2x, int p2y, int rgb){
        
        tempImage = new BufferedImage(jPanel_main.getWidth(), jPanel_main.getHeight(),1);
        
        for(int i = 0; i < tempImage.getWidth(); i++)
            for(int j = 0; j < tempImage.getHeight(); j++)
                tempImage.setRGB(i, j, image.getRGB(i, j));
    	    	
        int x1 = 0;
        int x2 = 0;
        int y1 = 0;
        int y2 = 0;

        int w = jPanel_main.getWidth();
        int h = jPanel_main.getHeight();                
        
        if(p2x > w) p2x = w;
        else if(p2x < 0) p2x = 0;
        
        if(p2y > h) p2y = h;
        else if(p2y < 0)p2y = 0;

        if(p1x < p2x){x1 = p1x; x2 = p2x;}
        else{x1 = p2x; x2 = p1x;}

        if(p1y < p2y){y1 = p1y; y2 = p2y;}
        else{y1 = p2y; y2 = p1y;}

        double r = Math.sqrt((p1x - p2x)*(p1x - p2x) + (p1y - p2y)*(p1y - p2y));
        double d = 0;
        
        for(int x = 0; x < w; x++){
            for(int y = 0; y < h; y++){
                d = Math.sqrt((x - p2x)*(x - p2x) + (y - p2y)*(y - p2y));
                if(d < r)
                    tempImage.setRGB(x, y, new Color(rgb, rgb, rgb).getRGB());                
            }
        }
        
        g2D.drawImage(tempImage,0,0,jPanel_main);        
    }
    
    private void drawRectangle(int p1x, int p1y, int p2x, int p2y, int rgb){
        
        tempImage = new BufferedImage(jPanel_main.getWidth(), jPanel_main.getHeight(),1);
        
        for(int i = 0; i < tempImage.getWidth(); i++)
            for(int j = 0; j < tempImage.getHeight(); j++)
                tempImage.setRGB(i, j, image.getRGB(i, j));
    	    	
        int x1 = 0;
        int x2 = 0;
        int y1 = 0;
        int y2 = 0;

        int w = jPanel_main.getWidth();
        int h = jPanel_main.getHeight();                
        
        if(p2x > w) p2x = w;
        else if(p2x < 0) p2x = 0;
                
        if(p2y > h) p2y = h;
        else if(p2y < 0) p2y = 0;

        if(p1x < p2x){ x1 = p1x; x2 = p2x;}
        else{x1 = p2x; x2 = p1x;}

        if(p1y < p2y){y1 = p1y;y2 = p2y;}
        else{y1 = p2y;y2 = p1y;}

        for(int x = x1; x < x2; x++){
            for(int y = y1; y < y2; y++){
                tempImage.setRGB(x, y, new Color(rgb, rgb, rgb).getRGB());
            }
        }
        
        g2D.drawImage(tempImage,0,0,jPanel_main);
    }
    
    private void erase(int p1x, int p1y, int p2x, int p2y){
        
        tempImage = new BufferedImage(jPanel_main.getWidth(), jPanel_main.getHeight(),1);
        
        for(int i = 0; i < tempImage.getWidth(); i++)
            for(int j = 0; j < tempImage.getHeight(); j++)
                tempImage.setRGB(i, j, image.getRGB(i, j));
    	    	
        int x1 = 0;
        int x2 = 0;
        int y1 = 0;
        int y2 = 0;

        int w = jPanel_main.getWidth();
        int h = jPanel_main.getHeight();                
        
        if(p2x > w) p2x = w;
        else if(p2x < 0) p2x = 0;
                
        if(p2y > h) p2y = h;
        else if(p2y < 0) p2y = 0;

        if(p1x < p2x){ x1 = p1x; x2 = p2x;}
        else{x1 = p2x; x2 = p1x;}

        if(p1y < p2y){y1 = p1y;y2 = p2y;}
        else{y1 = p2y;y2 = p1y;}

        for(int x = x1; x < x2; x++){
            for(int y = y1; y < y2; y++){
                tempImage.setRGB(x, y, new Color(255, 255, 255).getRGB());
            }
        }
        
        g2D.drawImage(tempImage,0,0,jPanel_main);
    }
      
    public void resetGlobalVariables(){
            image = null;
            ImageInitialized = false;
            
            X = -1;
            Y = -1;       

            start_x = -1;
            start_y = -1;

            goal_x = -1;
            goal_y = -1;
            goal_r = 0;

            run  = false;
            stop = true;
     }
    
    public void clearTextFields(){
        jTextField_iteration.setText("");
        jTextField_nodeCount.setText("");
        jTextField_pathLength.setText("");
        jTextArea_watch.setText("");
    }
    
    public class RRT extends Thread{
        
        Tree tree = new Tree();
        Node start;
        int nodeCount = 0;  
        int iteration = 0;
        int tryGoalFactor = 0;
        boolean adaptiveMode = true;                
               
        final int maxIteration = Integer.parseInt(jComboBox_maxIteration.getSelectedItem().toString());
        double maxEdgeLength = Double.parseDouble(jComboBox_EdgeLength.getSelectedItem().toString());
        String algorithm;
                		
        public void run(){
            algorithm = jComboBox_algorithm.getSelectedItem().toString();
            if(algorithm.equals("RRT"))
                rrt();
            else if(algorithm.equals("RRT+"))
                rrt_plus();
            else if(algorithm.equals("RRT*"))
                rrt_star();
        }
        
        public void rrt_star(){  
            
            start = new Node(start_x, start_y);           
            tree.addNode(start, null);
            Node goal = null;
            
            if(goal_x != -1 && goal_y != -1)
                goal = new Node(goal_x, goal_y);

            Node randomNode;
            Node nearestNode;
            Node newNode = null;
            Node goalNode = null;
            boolean goalReached = false;
            boolean goalFound = false;
            double radius = 9999;
            ArrayList<Node> nearestNodes = new ArrayList<Node>();
            boolean nodeAdded = false;
            
            MiscMethods MM = new MiscMethods();
            
            tryGoalFactor = MM.getTryGoalMode(jComboBox_tryGoalMode);
            
            if(tryGoalFactor == 0){
                adaptiveMode = true;
                tryGoalFactor = 1;
            }
            else
                adaptiveMode = false;
            
            speed = jSlider_speed.getMaximum() - jSlider_speed.getValue();
            
            while(!stop){
                             
                try{Thread.sleep(10);}
                catch(Exception x){x.printStackTrace();}
                
                while(run){
                    
                    try{Thread.sleep(speed);}
                    catch(Exception x){x.printStackTrace();}

                    randomNode = MM.getRandomState(image);
                    nodeAdded = false;

                    if(goal != null && tryGoalFactor != -1){
                        if(iteration%tryGoalFactor == 0){
                            randomNode = new Node(goal_x, goal_y);
                        }
                    }

                    nearestNodes = MM.getNearestNodes(tree, randomNode, radius);
                    
                    //jTextArea_watch.setText(nearestNodes.size()+"");

                    if(nearestNodes.size() > 200){
                        radius = MM.distanceBetween(randomNode,nearestNodes.get(200));
                    }
                    
                    //if(nearestNodes.isEmpty()) radius = 9999;
                    
                    for(int i = 0; i < nearestNodes.size(); i++){
                        
                        nearestNode = nearestNodes.get(i);

                        if(MM.isValidExpansion(image, nearestNode, randomNode, 99999)){

                            newNode = MM.goTowardsNode(nearestNode, randomNode, maxEdgeLength);
                            if(!goalFound)
                                MM.drawLineSegment(g2D, image,nearestNode, newNode);
                            tree.addChild(nearestNode, newNode);
                            tree.addNode(newNode, nearestNode);
                            nodeCount++;

                            nearestNode = newNode;

                            while(MM.distanceBetween(newNode, randomNode) > 0){                        
                                newNode = MM.goTowardsNode(nearestNode, randomNode, maxEdgeLength);
                                if(!goalFound)
                                    MM.drawLineSegment(g2D, image, nearestNode, newNode);
                                tree.addChild(nearestNode, newNode);
                                tree.addNode(newNode, nearestNode);
                                nodeCount++;
                                nearestNode = newNode;
                            }                                               

                            if(MM.goalReached(newNode, goal_x, goal_y, goal_r) && !goalReached){
                                newNode.setCoordinate(goal_x,goal_y);
                                ArrayList<Node> path = MM.getPath(start, newNode, tree);
                                MM.highLightPath(g2D, image,path, maxEdgeLength);
                                double pLength = MM.getPathLength(start, newNode);
                                jTextField_pathLength.setText(MM.roundDecimal(pLength)+"");
                                MM.updateEdges(g2D, map, jPanel_main, tree, start, newNode);
                                goalNode = newNode;
                                goalFound = true;
                            }

                            jTextField_nodeCount.setText(nodeCount+"");
                            if(adaptiveMode) tryGoalFactor = 1;
                            
                            nodeAdded = true;
                        }
                        else if(adaptiveMode && tryGoalFactor < 10) tryGoalFactor++;
                        
                        if(nodeAdded)break;
                    }
                    
                    if(nodeAdded){
                        for(int i = 0; i < nearestNodes.size(); i++){

                            Node thisNode = nearestNodes.get(i);                        
                            double newNodePathLength = newNode.getPathLengthFromRoot();
                            double thisNodepathLength = thisNode.getPathLengthFromRoot();
                            double distance = MM.distanceBetween(newNode, thisNode);

                            if(newNodePathLength + distance < thisNodepathLength){
                               
                                if(MM.isValidExpansion(image, newNode, thisNode, 99999)){
                                    tree.changeParent(thisNode, newNode);
                                    tree.addChild(newNode, thisNode);
                                    thisNode.setPathLengthFromRoot(newNodePathLength + distance);                                    
                                    if(!goalFound)
                                        MM.drawLineSegment(g2D, image, thisNode, newNode);
                                }
                            }                            
                        }
                    }
                    
                    iteration++;                                        
                    
                    jTextField_iteration.setText(MM.roundDecimal(iteration)+"");
                    if(iteration == maxIteration){
                        run = false;
                        stop = true;
                        if(goalFound)
                            MM.updateEdges(g2D, map, jPanel_main, tree, start, goalNode);
                    }
                }                
            }
        }
        
        public void rrt_plus(){
            start = new Node(start_x, start_y);
            tree.addNode(start, null);

            Node randomNode;
            Node nearestNode;
            Node newNode;
            
            MiscMethods MM = new MiscMethods();
                        
            tryGoalFactor = MM.getTryGoalMode(jComboBox_tryGoalMode);
            
            if(tryGoalFactor == 0){
                adaptiveMode = true;
                tryGoalFactor = 1;
            }
            else
                adaptiveMode = false;
            
            speed = jSlider_speed.getMaximum() - jSlider_speed.getValue();
            
            while(!stop){

                try{Thread.sleep(10);}
                catch(Exception x){x.printStackTrace();}
                
                while(run){
                    
                    try{Thread.sleep(speed);}
                    catch(Exception x){x.printStackTrace();}

                    randomNode = MM.getRandomState(image);

                    if(goal_x != -1 && goal_y != -1 && tryGoalFactor != -1){
                        if(iteration%tryGoalFactor == 0){
                            randomNode = new Node(goal_x, goal_y);
                        }
                    }

                    nearestNode = MM.getNearestNode(tree, randomNode);

                    if(MM.isValidExpansion(image, nearestNode, randomNode, maxEdgeLength)){

                        newNode = MM.goTowardsNode(nearestNode, randomNode, maxEdgeLength);
                        MM.drawLineSegment(g2D, image, nearestNode, newNode);
                        tree.addChild(nearestNode, newNode);
                        tree.addNode(newNode, nearestNode);
                        nodeCount++;
                        
                        nearestNode = newNode;                                                                                                                       
                        
                        if(MM.goalReached(newNode, goal_x, goal_y, goal_r)){
                            run = false;
                            stop = true;
                            ArrayList<Node> path = MM.getPath(start, newNode, tree);
                            MM.highLightPath(g2D, image, path, maxEdgeLength);
                            double pLength = MM.getPathLength(start, newNode);
                            jTextField_pathLength.setText(MM.roundDecimal(pLength)+"");
                        }
                                                
                        jTextField_nodeCount.setText(nodeCount+"");
                        if(adaptiveMode) tryGoalFactor = 1;                            
                    }
                    else if(adaptiveMode && tryGoalFactor < 10) tryGoalFactor++;

                    iteration++;
                    jTextField_iteration.setText(MM.roundDecimal(iteration)+"");
                    if(iteration == maxIteration){run = false;stop = true;}
                }                
            }
        }
        
        public void rrt(){
            start = new Node(start_x, start_y);
            tree.addNode(start, null);

            Node randomNode;
            Node nearestNode;
            Node newNode;
            
            MiscMethods MM = new MiscMethods();
            
            tryGoalFactor = MM.getTryGoalMode(jComboBox_tryGoalMode);
            
            if(tryGoalFactor == 0){
                adaptiveMode = true;
                tryGoalFactor = 1;
            }
            else
                adaptiveMode = false;
            
            speed = jSlider_speed.getMaximum() - jSlider_speed.getValue();
            
            while(!stop){

                try{Thread.sleep(10);}
                catch(Exception x){x.printStackTrace();}
                
                while(run){
                    
                    try{Thread.sleep(speed);}
                    catch(Exception x){x.printStackTrace();}

                    randomNode = MM.getRandomState(image);

                    if(goal_x != -1 && goal_y != -1 && tryGoalFactor != -1){
                        if(iteration%tryGoalFactor == 0){
                            randomNode = new Node(goal_x, goal_y);
                        }
                    }

                    nearestNode = MM.getNearestNode(tree, randomNode);

                    if(MM.isValidExpansion(image, nearestNode, randomNode, 99999)){

                        newNode = MM.goTowardsNode(nearestNode, randomNode, maxEdgeLength);
                        MM.drawLineSegment(g2D, image,nearestNode, newNode);
                        tree.addChild(nearestNode, newNode);
                        tree.addNode(newNode, nearestNode);
                        nodeCount++;
                        
                        nearestNode = newNode;
                        
                        while(MM.distanceBetween(newNode, randomNode) > 0){                        
                            newNode = MM.goTowardsNode(nearestNode, randomNode, maxEdgeLength);
                            MM.drawLineSegment(g2D, image, nearestNode, newNode);
                            
                            tree.addChild(nearestNode, newNode);
                            tree.addNode(newNode, nearestNode);
                            nodeCount++;
                            
                            nearestNode = newNode;                           
                        }                                               
                        
                        if(MM.goalReached(newNode, goal_x, goal_y, goal_r)){
                            run = false;
                            stop = true;
                            ArrayList<Node> path = MM.getPath(start, newNode, tree);
                            MM.highLightPath(g2D, image,path, maxEdgeLength);
                            double pLength = MM.getPathLength(start, newNode);
                            jTextField_pathLength.setText(MM.roundDecimal(pLength)+"");
                        }
                                                
                        jTextField_nodeCount.setText(nodeCount+"");
                        if(adaptiveMode) tryGoalFactor = 1;                            
                    }
                    else if(adaptiveMode && tryGoalFactor < 10) tryGoalFactor++;

                    iteration++;                                        
                    
                    jTextField_iteration.setText(MM.roundDecimal(iteration)+"");                    
                    if(iteration == maxIteration){run = false;stop = true;}
                }                
            }
        }                
    }
}
